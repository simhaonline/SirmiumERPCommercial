@model AppUser

@{
    Layout = "_MainLayout";
    ViewBag.Title = "Edit Profile";
}

<style type="text/css">
    .contents {
        display: flex;
        background-color: cornsilk;
        justify-content: center;
        align-items: center;
        /*height: 480px;
        width: 640px;*/
        margin: auto;
        margin-top: 1%;
    }

    #video-div {
        width: 100%;
        position: relative;
    }

    video {
        width: 100%;
        border-radius: 30px;
        box-sizing: border-box;
    }

    #controls {
        position: absolute;
        bottom: 6px;
        width: 100%;
        border-bottom-left-radius: 30px;
        border-bottom-right-radius: 30px;
        align-content: center;
        align-items: center;
        background-color: cadetblue;
        opacity: 0.7;
    }

    .btnC {
        width: 100%;
        cursor: pointer;
        font-size: 30px;
        margin: auto;
    }

        .btnC button {
            border-radius: 25px;
            background-color: white;
            opacity: 0.5;
            color: #000000;
        }

            .btnC button:hover {
                background-color: #17a2b8;
                color: white;
            }

    #capture {
        width: 50px;
        height: 50px;
        margin-left: 45%;
    }

    canvas {
        width: 640px;
        height: 480px;
        border-radius: 30px;
    }

    .btnSave {
        width: 150px;
        height: 50px;
        border-radius: 25px;
        background-color: cadetblue;
        color: #000000;
    }

    form {
        width: 150px;
        height: 50px;
        margin-right: 0px;
        display: inline;
    }
</style>

<div class="row rightNav">
    @await Component.InvokeAsync("CompanyNavigation", Model)
</div>

<div class="row" style="background-color: none">
    <div class="contents" style="background: none">
        <div id="video-div">
            <video id="player"></video>
            <div id="controls">
                <div class="btnC">
                    <button id="capture"><i class="fas fa-camera"></i></button>
                    <button class="btnSave" id="save"
                            style="margin-left: 25%;" hidden>
                        <i class="fas fa-save"></i>
                        <span style="font-size:20px">Save</span>
                    </button>
                    <button class="btnSave" id="new" hidden>
                        <i class="fas fa-camera"></i>
                        <span style="font-size:20px">Try Again</span>
                    </button>
                </div>
            </div>
            <canvas id="canvas" hidden></canvas>
        </div>
    </div>
</div>
<script>
        const player = document.getElementById("player");
        const canvas = document.getElementById("canvas");
        const context = canvas.getContext("2d");
        const captureBtn = document.getElementById("capture");
        const saveBtn = document.getElementById("save");
        const newBtn = document.getElementById("new");
        //const img = document.getElementById("img");

        const constraints = {
            video: true,
        };

        if (navigator.mediaDevices == undefined) {
            navigator.mediaDevices = {};
            navigator.mediaDevices.getUserMedia = function (constraints) {
                let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                if (!getUserMedia) {
                    return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                }
                return new Promise(function (resolve, reject) {
                    getUserMedia.call(navigator, cons, resolve, reject);
                });
            }
        } else {
            navigator.mediaDevices.enumerateDevices()
                .then(devices => {
                    devices.forEach(device => {
                        console.log(device.kind.toUpperCase(), device.label);
                    })
                })
                .catch(err => {
                    console.log(err.name, err.message);
                })
        }

        navigator.mediaDevices.getUserMedia(constraints)
            .then((stream) => {
                if ("srcObject" in player) {
                    player.srcObject = stream;
                } else {
                    player.src = window.Url.createObjectUrl(stream);
                }
            });

        player.onloadedmetadata = function (ev) {
            player.play();
        };

        captureBtn.addEventListener("click", () => {
            context.drawImage(player, 0, 0, canvas.width, canvas.height);
            //img.value = canvas.toDataURL();
            canvas.hidden = false;
            player.hidden = true;
            captureBtn.hidden = true;
            saveBtn.hidden = false;
            newBtn.hidden = false;
        });

        newBtn.addEventListener("click", () => {
            canvas.hidden = true;
            player.hidden = false;
            captureBtn.hidden = false;
            saveBtn.hidden = true;
            newBtn.hidden = true;
        });



</script>