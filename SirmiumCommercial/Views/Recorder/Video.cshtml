@model  VideoModel

@{
    Layout = "_UserLayout";
    ViewData["Title"] = "My Profile";
    ViewData["ReturnUrl"] = ViewContext.HttpContext.Request.PathAndQuery();
}

<style type="text/css">
    .video-container {
        font-family: 'Arial Rounded MT';
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translateX(-50%) translateY(-50%);
        background: #fff;
        padding: 10px;
        border: 1px solid rgba(0, 0, 0, .4);
        opacity: 1;
        box-shadow: 0 6px 12px rgba(0, 0, 0, .6);
        transition: all 0.3s linear 0s;
        z-index: 2;
    }

    .video-header {
        font-size: 35px;
        font-weight: bold;
        text-align: left;
        color: #6a6c6f;
    }

    .video-freeze-layer {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, .3);
        z-index: 1;
    }

    #closeVideoWindow:hover {
        cursor: pointer;
        color: #34495e;
    }

    .videoBtn {
        display: none;
        position: absolute;
        transform: translateY(70%) translateX(-350%);
    }

    .img-video:hover + .videoBtn {
        display: inline;
    }

    .videoBtn:hover {
        display: inline;
    }
</style>

<div class="col-lg-12">
    <div class="col-lg-3 text-center m-t-sm">
        <video src="~/UsersData/b6a0435b-8716-4479-8086-01f902b29097/video.mp4"
               class="img-video col-lg-11" style="z-index: 1"></video>
        <div class="text-center img-video videoBtn" style="z-index: 2">
            <button class="btn btn-sm btn-primary2 p-xs" onclick="videoPlay.show();">
                <span class="fa fa-play" style="font-size: xx-large"></span>
            </button>
        </div>
    </div>
</div>

<div id="videoFreezeLayer" class="video-freeze-layer" style="display: none"></div>

<div id="player" class="video-container" style="display: none">
    <div class="video-header">
        <span>Camera</span>
        <a onclick="videoPlay.close();"
           class="pull-right text-muted fa fa-close"
           id="closeVideoWindow"></a>
    </div>
    <div class="contents text-center">
        <div class="video">
            <video src="~/UsersData/b6a0435b-8716-4479-8086-01f902b29097/video.mp4" 
                   class="text-center" controls></video>
        </div>
    </div>
</div>

<div id="video" class="video-container" style="display: none">
    <div class="video-header">
        <span>Player</span>
        <a href="@ViewData["ReturnUrl"]"
           class="pull-right text-muted fa fa-close"
           id="closeVideoWindow"></a>
    </div>
    <div class="contents text-center">
        <div class="video">
            <video id="recorder" class="text-center"></video>
            <div class="controls" id="controls">
                <div class="btnC row text-center">
                    <a id="recBtn" class="btn btn-outline btn-default">
                        <i class="far fa-dot-circle-o text-danger text-big"></i>
                        <span style="font-size:20px">Rec</span>
                    </a>
                    <a id="stopBtn" class="btn btn-outline btn-default" style="display: none">
                        <i class="far fa-stop-circle text-primary text-big"></i>
                        <span style="font-size:20px">Stop</span>
                    </a>
                </div>
            </div>
            <form asp-controller="Recorder" asp-action="SaveVideo" method="post">
                <input asp-for="UserId" hidden />
                <input asp-for="videoUrl" id="videoUrl" hidden />
                <video id="player" controls style="display: none"></video>
                <div class="playerControls" id="controls2" style="display: none">
                    <div class="playerBtn">
                        <a id="replayBtn" class="btn btn-outline btn-default">
                            <i class="fas fa-redo text-primary text-big"></i>
                            <span style="font-size:20px">Replay</span>
                        </a>
                        <button id="downloadBtn" class="btn btn-outline btn-default"
                                type="submit">
                            <i class="fa fa-save text-success text-big"></i>
                            <span style="font-size:20px">Save</span>
                        </button>
                        <a id="newVideoBtn" class="btn btn-outline btn-default">
                            <i class="far fa-dot-circle-o text-danger text-big"></i>
                            <span style="font-size:20px">Try Again</span>
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    var videoWindow = document.getElementById('video');
    var freezeLayer = document.getElementById('videoFreezeLayer');

    var player = document.getElementById('player');

    var videoPlay = new function () {
        this.show = function () {
            player.style.display = '';
            freezeLayer.style.display = '';
        };
        this.close = function () {
            player.style.display = 'none';
            freezeLayer.style.display = 'none';
        }
    }

    var NewVideo = new function () {
        this.show = function () {
            videoWindow.style.display = '';
            freezeLayer.style.display = '';
        };
        this.close = function () {
            videoWindow.style.display = 'none';
            freezeLayer.style.display = 'none';
        }
    }

    var Camera = new function () {
        this.active = function () {
            let constraintObj = {
                audio: true,
                video: true
            };

            if (navigator.mediaDevices == undefined) {
                navigator.mediaDevices = {};
                navigator.mediaDevices.getUserMedia = function (constraintObj) {
                    let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                    if (!getUserMedia) {
                        return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                    }
                    return new Promise(function (resolve, reject) {
                        getUserMedia.call(navigator, cons, resolve, reject);
                    });
                }
            } else {
                navigator.mediaDevices.enumerateDevices()
                    .then(devices => {
                        devices.forEach(device => {
                            console.log(device.kind.toUpperCase(), device.label);
                        })
                    })
                    .catch(err => {
                        console.log(err.name, err.message);
                    })
            }

            navigator.mediaDevices.getUserMedia(constraintObj)
                .then(function (mediaStreamObj) {
                    let video = document.getElementById('recorder');
                    if ("srcObject" in video) {
                        video.srcObject = mediaStreamObj;
                    } else {
                        video.src = windo.Url.createObjectUrl(mediaStreamObj);
                    }

                    video.onloadedmetadata = function (ev) {
                        video.play();
                    };

                    let start = document.getElementById('recBtn');
                    let stop = document.getElementById('stopBtn');
                    let vidSave = document.getElementById('player');
                    let save = document.getElementById('saveBtn');
                    let videoSave = document.getElementById('videoUrl');
                    let mediaRecorder = new MediaRecorder(mediaStreamObj);
                    let chunks = [];

                    start.addEventListener('click', (ev) => {
                        mediaRecorder.start();
                        start.style.display = 'none';
                        stop.style.display = '';
                        video.style.display = '';
                        vidSave.style.display = 'none';
                        console.log(mediaRecorder.state);
                    })

                    stop.addEventListener('click', (ev) => {
                        mediaRecorder.stop();
                        stop.style.display = 'none';
                        start.style.display = 'inline';
                        console.log(mediaRecorder.state);
                    });

                    mediaRecorder.ondataavailable = function (ev) {
                        chunks.push(ev.data);
                    }
                    
                        var reader = new FileReader();
                    let controls = document.getElementById('controls');
                    let playerControls = document.getElementById('controls2');
                    mediaRecorder.onstop = (ev) => {
                        let blob = new Blob(chunks, { 'type': 'video/mp4' });
                        chunks = [];
                        let videoURL = window.URL.createObjectURL(blob);
                        vidSave.src = videoURL;
                        videoSave.value = videoURL;

                        reader.readAsDataURL(blob);
                        console.log(reader.result.toString());


                        video.style.display = 'none';
                        vidSave.style.display = 'inline';
                        controls.style.display = 'none';
                        vidSave.controls = true;
                    }

                    vidSave.onended = (ev) => {
                        console.log('video stop');
                        videoSave.value = reader.result.toString();
                        console.log(reader.result.toString());
                        vidSave.controls = false;
                        playerControls.style.display = 'inline';
                    }

                    let replay = document.getElementById('replayBtn');
                    replay.addEventListener('click', (ev) => {
                        playerControls.style.display = 'none';
                        vidSave.controls = true;
                        vidSave.play();
                    });

                    let newVideo = document.getElementById('newVideoBtn');
                    newVideo.addEventListener('click', (ev) => {
                        vidSave.style.display = 'none';
                        playerControls.style.display = 'none';
                        video.style.display = 'inline';
                        controls.style.display = 'inline';
                        document.rel
                    });
                })
                .catch(function (err) {
                    console.log(err.name, err.message);
                });
        }
    }
</script>
