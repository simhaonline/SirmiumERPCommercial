@model CourseViewModel

@{
    Layout = "_UserLayout";
    ViewData["Title"] = Model.Course.Title;
    ViewData["For"] = "Course";
    ViewData["ForId"] = Model.Course.CourseId;
}

@section Styles {
    <environment names="Development,Staging,Production">
        <link rel="stylesheet" href="~/lib_local/css_local/UserLocal.css" />
        <link rel="stylesheet" href="~/lib_local/courseDetails/courseDetails.css" />
    </environment>
}

<style type="text/css">
    textarea {
        resize: none;
        overflow-y: scroll;
    }

    .videoBtn {
        display: none;
        position: absolute;
        top: 38%;
        left: 2%;
    }

    .img-video:hover + .videoBtn {
        display: inline;
    }

    .videoBtn:hover {
        display: inline;
    }

    #video-video:hover {
        opacity: 0.4;
    }

    #video-videoBtn:hover > #video-video {
        opacity: 0.4;
    }

    #all-users {
        height: 200px;
        width: 200px;
        overflow-y: scroll;
    }
</style>
<!--Msg window-->@*
    @if (TempData["sccMsgCourse"] != null)
    {
        <div id="msgWindowSuccess">
            <input value="@TempData["sccMsgCourse"]" id="windowMsg" hidden />
        </div>
    }
    @if (TempData["errMsgCourse"] != null)
    {
        <div id="msgWindowError">
            <input value="@TempData["errMsgCM"]" id="windowMsg" hidden />
        </div>
    }*@

<!--Header-->
<div class="normalheader p-sm">
    <div class="hpanel">
        <div class="panel-body" style="font-size: 30px;">
            <span class="@Model.Course.AwardIcon"></span>
            <span class="text-primary">@Model.Course.Title</span>
            @if (Model.UsersOnCourse.FirstOrDefault(u => u.Id == ViewData["Id"].ToString())
    != null)
            {
                <a class="m-b-sm pull-right btn">
                    <span class="fas fa-check text-success" style="font-size: 20px;"></span>
                    <span class="text-muted" style="font-size: 20px;">My course</span>
                </a>
            }
            else
            {
                if ((DateTime.Now < Model.Course.EndDate) ||
                    (Model.Course.EndDate == DateTime.MinValue))
                {
                    <a href="@Url.Action("Participate", "Courses",
                                new { id = ViewData["Id"],
                                    courseId = Model.Course.CourseId})"
                       class="m-b-sm pull-right btn" id="participate-btn"
                       onclick="participateFunction('@ViewData["Id"]', @Model.Course.CourseId);">
                        <span class="fa fa-plus text-primary" style="font-size: 20px;"></span>
                        <span class="text-muted" style="font-size: 20px;">Participate</span>
                    </a>
                }
            }
        </div>
    </div>
</div>

<!--Course details-->
<div class="row m-l-md m-r-md">
    <div class="col-lg-12">
        <div class="hpanel m-b-xs">
            <div class="panel-heading">
                <div class="panel-tools">
                    <a class="showhide"><i class="fa fa-chevron-up" style="font-size:20px"></i></a>
                </div>
                <h3 class="m-n">
                    <span class="fas fa-info text-info"></span>
                    <span class="text-muted"> Details:</span>
                </h3>
            </div>
            <div class="panel-body">
                @Html.Partial("Details", Model)
            </div>
        </div>
    </div>
</div>

<!--Course presentations-->
<div class="row m-l-md m-r-md">
    <div class="col-lg-12">
        <div class="hpanel m-b-xs panel-collapse">
            <div class="panel-heading">
                <div class="panel-tools" style="font-size:20px">
                    <span class="text-muted">Total parts:</span>
                    @if (Model.Course.Presentations.Count == 0)
                    {
                        <span class="text-warning">0</span>
                    }
                    else
                    {
                        <span class="text-primary">@Model.Course.Presentations.Count</span>
                    }
                    <a class="showhide"><i class="fa fa-chevron-down"></i></a>
                </div>
                <h3 class="m-n">
                    <span class="fas fa-book-open text-primary"></span>
                    <span class="text-muted"> Presentations:</span>
                </h3>
            </div>
            @if (Model.Course.Presentations.Count() == 0)
            {
                <div class="panel-body" style="display: none">
                    <div class="col-lg-12 navbar bg-info">
                        <span class="navbar-brand">No Presentation</span>
                    </div>
                </div>
            }
            else
            {
                var i = 0;
                foreach (Presentation p in Model.Course.Presentations.OrderBy(p => p.Part))
                {
                    var partColor = new List<String>{"text-primary", "text-primary-2", "text-info",
                            "text-success", "text-warning", "text-danger"};
                    <div class="panel-body" style="display: none">
                        <div class="col-lg-12 m-b-sm ">
                            <div class="col-lg-1 text-center">
                                <h4 class="@partColor[i]">PART</h4>
                                <h1><span class="text-big @partColor[i]">@p.Part</span></h1>
                                @if (i == 5)
                                {
                                    i = 0;
                                }
                                else
                                {
                                    i++;
                                }
                            </div>
                            @if (p.VideoId != 0)
                            {
                                <div class="col-lg-3">
                                    <div id="video-videoBtn"
                                         style="background-color: #0c0830; padding:0px">
                                        <video src="@Model.Videos.FirstOrDefault(v => v.Id == p.VideoId).VideoPath" class="img-video"
                                               style="z-index: 1" id="video-video"></video>
                                        <div class="text-center img-video videoBtn" style="z-index: 1">
                                            <a href="@Url.Action("Index", "Recorder",
                                                new { id = ViewData["Id"], videoId = p.VideoId })"
                                               class="btn btn-sm btn-primary2 p-xs">
                                                <span style="font-weight: 400; font-size: 18px">Watch</span>
                                                <span class="fa fa-play" style="font-size: 18px"></span>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-lg-3">
                                    <div class="text-center p-lg" style="width: 100%; height: 80%;
                                    background-color: #bbbbbb;">
                                        <strong style="color:#34495e; font-size:20px;
                                            font-family: 'Open Sans','Helvetica Neue',
                                            Helvetica,Arial,sans-serif; ">
                                            SirmiumCommercial
                                        </strong>
                                        <br />
                                        <br />
                                        <i style="font-size: 45px; color:#5b80a4;" class="fas fa-video-slash"></i>
                                        <br />
                                        <strong style="font-size: 25px; color:#5b80a4;">NO VIDEO</strong>
                                    </div>
                                </div>
                            }
                            <div class="col-lg-4">
                                <h1>@p.Title</h1>
                                <h5>
                                    <span class="fa fa-plus-circle"></span>
                                    Added:
                                    <span class="text-success">
                                        @p.DateAdded.Date.ToShortDateString()
                                    </span>
                                </h5>
                                <h5>
                                    <span class="fa fa-pencil-square-o"></span>
                                    Date modified:
                                    <span class="text-info">
                                        @p.DateModified.Date.ToShortDateString()
                                    </span>
                                </h5>
                            </div>
                            <div class="col-lg-2 text-center">
                                @if (Model.UsersOnCourse
                       .FirstOrDefault(u => u.Id == ViewData["Id"].ToString()) != null)
                                {
                                    <a class="btn" style="font-size: 20px;"
                                       href="@Url.Action("PresentationDetails", "Courses",
                                                new {
                                                    id = ViewData["Id"].ToString(),
                                                    courseId = Model.Course.CourseId,
                                                    presentationId = p.PresentationId
                                                })">
                                        <span class="fa fa-info text-info"></span>
                                        <span class="text-muted"> Info</span>
                                    </a>
                                    @await Component.InvokeAsync("CourseNewRepresentation",
                                            new{
                                                courseId = Model.Course.CourseId,
                                                presentationId = p.PresentationId,
                                                userId = ViewData["Id"]
                                            })
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<!--Users on course-->
<div class="row m-l-md m-r-md">
    <div class="col-lg-12">
        <div class="hpanel m-b-xs panel-collapse">
            <div class="panel-heading">
                <div class="panel-tools" style="font-size:20px">
                    <span class="text-muted">Total Users:</span>
                    @if (Model.UsersOnCourse.Count() == 0)
                                               {
                        <span class="text-warning">0</span>
                    }
                    else
                    {
                        <span class="text-primary">@Model.UsersOnCourse.Count()</span>
                    }
                    <a class="showhide"><i class="fa fa-chevron-down" style="font-size:20px"></i></a>
                </div>
                <h3 class="m-n">
                    <span class="fas fa-users text-success"></span>
                    <span class="text-muted"> Users:</span>
                </h3>
            </div>
            <div class="panel-body" style="display: none">
                <div class="row">
                    @{
                        var borderTop = new List<String>{"hviolet", "hred", "hgreen", "hyellow",
                            "hblue", "hnavyblue", "horange", "hreddeep"};
                                       var j = 0;
                    }
                    @foreach (AppUser user in Model.UsersOnCourse)
                                       {
                        <div class="col-lg-3">
                            <div class="hpanel contact-panel @borderTop[j]">
                                <div class="panel-body" style="display: none">
                                    @if (user.ProfilePhotoUrl == null)
                                       {
                                        <img src="~/defaultAvatar.png" class="img-circle m-b"
                                             alt="logo" />
                                    }
                                    else
                                    {
                                        <img src="~/UsersData/@user.ProfilePhotoUrl"
                                             class="img-circle m-b" alt="logo" />
                                    }

                                    <h3>@user.FirstName <br /> @user.LastName</h3>
                                    <a href="@Url.Action("UserProfile", "User",
                            new { id = ViewData["Id"], userId = user.Id })">
                                        <span class="text-muted font-bold m-b-xs text-info">
                                            &#64;@user.UserName
                                        </span>
                                    </a><br />
                                    <div class="row">
                                        <a href="@Url.Action("Chat", "Chat",
                                    new { id = ViewData["Id"], user2Id = user.Id})"
                                           class="btn btn-primary pull-right m-r-sm">
                                            Message <span class="pe pe-7s-chat"></span>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        if (j == 7) { j = 0; } else { j++; }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!--Course comments-->
<div class="row m-l-md m-r-md">
    <div class="col-lg-12">
        <div class="hpanel m-b-xs ">
            <div class="panel-heading">
                <div class="panel-tools">
                    <a class="showhide"><i class="fa fa-chevron-up" style="font-size:20px"></i></a>
                </div>
                <h3 class="m-n">
                    <span class="far fa-comments text-primary-2"></span>
                    <span class="text-muted"> Comments:</span>
                </h3>
            </div>
            <div class="panel-body" style="max-height: 400px; overflow-y: scroll; padding: 0px;">
                <div id="allCommentsPartial">
                    @await Component.InvokeAsync("Comment", new { For = "Course", forId = Model.Course.CourseId })
                </div>
            </div>
        </div>
    </div>
</div>

<input id="userId" value="@ViewData["Id"]" hidden />
<input id="forId" value="@Model.Course.CourseId" hidden />
<input id="current-user-photo" value="@Model.User.ProfilePhotoUrl" hidden />

@section Scripts {
    <environment names="Development,Staging,Production">
        <script src="~/lib_local/comment-hub/comment-hub.js"></script>
        <script>
            var commentFor = "Course";
            var currentUser = document.getElementById('userId').value;
            var commentForId = document.getElementById('forId').value;

            //notification hub
            var connectionNotificatinoAllCourses = new signalR.HubConnectionBuilder().withUrl("/notificationHub").build();

            //start connection for chatHub - chat header
            connectionNotificatinoAllCourses.start().then(function () {
                console.log("Connected: --notification hub : CourseDetails--");
            }).catch(function (err) {
                return console.error(err.toString());
            });

            function participateFunction(currentUserId, courseId) {
                connectionNotificatinoAllCourses.invoke("Participate", currentUserId, courseId).catch(function (err) {
                    return console.error(err.toString());
                });
            };
        </script>
    </environment>
    <script>
        //notification hub
        var connectionNotificatinoAllCourses = new signalR.HubConnectionBuilder().withUrl("/notificationHub").build();

        //start connection for chatHub - chat header
        connectionNotificatinoAllCourses.start().then(function () {
            console.log("Connected: --notification hub : CourseDetails--");
        }).catch(function (err) {
            return console.error(err.toString());
        });

        function participateFunction(currentUserId, courseId) {
            connectionNotificatinoAllCourses.invoke("Participate", currentUserId, courseId).catch(function (err) {
                return console.error(err.toString());
            });
        };
    </script>
}
